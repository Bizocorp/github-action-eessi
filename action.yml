name: 'EESSI'
description: 'Install the EESSI software stack.'
branding:
  icon: 'server'
  color: 'gray-dark'
inputs:
  eessi_stack_version:
    description: 'Version of the EESSI stack to configure'
    required: false
    default: 'latest'
  eessi_config_package:
    description: 'URL to the EESSI cvmfs config package to install'
    required: false
    default: 'https://github.com/EESSI/filesystem-layer/releases/download/latest/cvmfs-config-eessi_latest_all.deb'
  run_local_checkout:
    description: 'Run the local checkout of the action and not the main repo code'
    required: false
    default: 'false'
  # Need to retain non-empty parameters from github-action-cvmfs
  cvmfs_client_profile:
    description: 'Choose a suitable proxy automatically if set to single.'
    required: false
    default: 'single'
  cvmfs_quota_limit:
    description: 'Soft-limit of the cache in Megabyte. Consult https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners#supported-runners-and-hardware-resources before changing'
    required: false
    default: '15000'
  cvmfs_use_cdn:
    description: 'Change the stratum 1 endpoints to caching servers from Cloudflare.'
    required: false
    default: 'yes'
  cvmfs_ubuntu_deb_location:
    description: 'Location from where to download the Ubuntu deb package of CernVM-FS'
    required: false
    default: 'https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb'
  cvmfs_macos_pkg_location:
    description: 'Location from where to download the masOS pkg package of CernVM-FS'
    required: false
    default: 'http://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-latest.pkg'


runs:
  using: "composite"
  steps:
    - uses: cvmfs-contrib/github-action-cvmfs@v3
      env:
        CVMFS_CONFIG_PACKAGE: ${{ inputs.eessi_config_package }}
        CVMFS_HTTP_PROXY: DIRECT
        CVMFS_REPOSITORIES: pilot.eessi-hpc.org
        CVMFS_CLIENT_PROFILE: ${{ inputs.cvmfs_client_profile }}
        CVMFS_QUOTA_LIMIT: ${{ inputs.cvmfs_quota_limit }}
        CVMFS_USE_CDN: ${{ inputs.cvmfs_use_cdn }}
        CVMFS_UBUNTU_DEB_LOCATION: ${{ inputs.cvmfs_ubuntu_deb_location }}
        CVMFS_MACOS_PKG_LOCATION: ${{ inputs.cvmfs_macos_pkg_location }}
    - id: install-eessi
      run: |
        echo "EESSI_SILENT=1" >> $GITHUB_ENV
        if [ "${{ inputs.eessi_stack_version }}" == "latest" ]; then
          echo "source /cvmfs/pilot.eessi-hpc.org/$EESSI_STACK_VERSION/init/bash" >> $HOME/env_config.export
        else
          echo "source /cvmfs/pilot.eessi-hpc.org/versions/$EESSI_STACK_VERSION/init/bash" >> $HOME/env_config.export
        fi
        sudo apt install -y direnv
        echo 'unset BASH_ENV' >> $HOME/env_config.export
        echo 'eval "$(direnv export bash)"' >> $HOME/env_config.export
        mkdir -p $HOME/direnv/
        echo "[whitelist]" >> $HOME/direnv/direnv.toml
        echo "prefix = [ '$GITHUB_WORKSPACE' ]" >> $HOME/direnv/direnv.toml
        cp $HOME/direnv/direnv.toml $HOME/direnv/config.toml
        echo "BASH_ENV=$HOME/env_config.export" >> $GITHUB_ENV
        echo "DIRENV_CONFIG=$HOME/direnv" >> $GITHUB_ENV
      shell: bash
      env:
        EESSI_STACK_VERSION: ${{ inputs.eessi_stack_version }}
        CVMFS_CONFIG_PACKAGE: ${{ inputs.eessi_config_package }}
        CVMFS_HTTP_PROXY: DIRECT
        CVMFS_REPOSITORIES: pilot.eessi-hpc.org
        CVMFS_CLIENT_PROFILE: ${{ inputs.cvmfs_client_profile }}
        CVMFS_QUOTA_LIMIT: ${{ inputs.cvmfs_quota_limit }}
        CVMFS_USE_CDN: ${{ inputs.cvmfs_use_cdn }}
        CVMFS_UBUNTU_DEB_LOCATION: ${{ inputs.cvmfs_ubuntu_deb_location }}
        CVMFS_MACOS_PKG_LOCATION: ${{ inputs.cvmfs_macos_pkg_location }}

